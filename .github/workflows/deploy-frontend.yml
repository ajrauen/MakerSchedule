name: Deploy Frontend

on:
  push:
    branches: [main]
    paths:
      - "MakerScheduleFE/**"
  workflow_dispatch:

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: MakerScheduleFE/package-lock.json

      - name: Install dependencies
        working-directory: MakerScheduleFE
        run: npm ci

      - name: Build frontend
        working-directory: MakerScheduleFE
        run: npm run build

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          script: |
            # Create frontend directory
            mkdir -p /var/www/makerschedule

            # Clean previous deployment
            rm -rf /var/www/makerschedule/*

      - name: Copy built files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          source: "MakerScheduleFE/dist/*"
          target: "/var/www/makerschedule/"
          strip_components: 2

      - name: Update nginx configuration
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          script: |
            # Navigate to deployment directory
            cd /tmp/makerschedule-deploy

            # Create updated nginx config with frontend support
            cat > nginx.conf << 'EOF'
            events {
                worker_connections 1024;
            }

            http {
                include       /etc/nginx/mime.types;
                default_type  application/octet-stream;
                
                # Rate limiting
                limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
                
                # Upstream for API
                upstream api {
                    server makerschedule_api:5000;
                }
                
                # Main server
                server {
                    listen 80;
                    server_name ${{ secrets.DOMAIN_NAME }};
                    
                    # Frontend static files
                    location / {
                        root /var/www/makerschedule;
                        try_files $uri $uri/ /index.html;
                        index index.html;
                        
                        # Cache static assets
                        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2)$ {
                            expires 1y;
                            add_header Cache-Control "public, immutable";
                        }
                    }
                    
                    # API endpoints
                    location /api/ {
                        limit_req zone=api burst=20 nodelay;
                        proxy_pass http://api/;
                        proxy_set_header Host $host;
                        proxy_set_header X-Real-IP $remote_addr;
                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                        proxy_set_header X-Forwarded-Proto $scheme;
                        proxy_connect_timeout 30s;
                        proxy_send_timeout 30s;
                        proxy_read_timeout 30s;
                    }
                    
                    # Swagger UI
                    location /swagger {
                        proxy_pass http://api/swagger;
                        proxy_set_header Host $host;
                        proxy_set_header X-Real-IP $remote_addr;
                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                        proxy_set_header X-Forwarded-Proto $scheme;
                    }
                    
                    # Let's Encrypt challenge
                    location /.well-known/acme-challenge/ {
                        root /var/www/certbot;
                    }
                }
            }
            EOF

            # Restart nginx to apply new configuration
            docker compose restart nginx

            echo "Frontend deployed successfully!"
            echo "Frontend URL: http://${{ secrets.DOMAIN_NAME }}"
            echo "API URL: http://${{ secrets.DOMAIN_NAME }}/api"
            echo "Swagger URL: http://${{ secrets.DOMAIN_NAME }}/swagger/index.html"
