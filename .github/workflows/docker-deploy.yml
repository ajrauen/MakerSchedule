# .github/workflows/docker-deploy.yml
name: Deploy to VPS with Docker

on:
  push:
    branches: [main]
    paths:
      - "MakeScheduleBE/**"
      - "docker-compose.production.yml"
      - "docker-compose.simple.yml"
      - "nginx.conf"
      - ".github/workflows/docker-deploy.yml"
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: dotnet restore MakeScheduleBE/MakerSchedule.sln

      - name: Build application
        run: dotnet build MakeScheduleBE/MakerSchedule.sln --configuration Release --no-restore

      - name: Publish application
        run: dotnet publish MakeScheduleBE/MakerSchedule.API/MakerSchedule.API.csproj --configuration Release --output ./publish --no-build

      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp -r publish/* deployment/
          cp docker-compose.production.yml deployment/docker-compose.yml
          cp nginx.conf deployment/

      - name: Test SSH Connection
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          timeout: 60s
          command_timeout: 30s
          script: |
            echo "SSH connection successful!"
            echo "Server info:"
            uname -a
            echo "Docker status:"
            docker --version || echo "Docker not installed"
            echo "Available space:"
            df -h

      - name: Copy files to VPS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          source: "deployment/*"
          target: "/tmp/makerschedule-deploy"
          strip_components: 1
          timeout: 120s
          command_timeout: 300s

      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          timeout: 120s
          command_timeout: 600s
          script: |
            # Navigate to deployment directory
            cd /tmp/makerschedule-deploy

            # Create .env file with secrets
            cat > .env << EOF
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            JWT_KEY=${{ secrets.JWT_KEY }}
            DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
            ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
            EOF

            # Process nginx config (simple working version)
            cat > nginx.conf << 'EOF'
            events {
                worker_connections 1024;
            }
            http {
                upstream api {
                    server makerschedule_api:5000;
                }
                server {
                    listen 80;
                    location / {
                        proxy_pass http://api/;
                    }
                }
            }
            EOF

            # Create app directory and copy application files (using working method)
            mkdir -p app

            # Copy all application files using the method that worked manually
            echo "Copying application files..."
            cp *.dll app/
            cp *.json app/
            cp *.config app/ 2>/dev/null || true
            cp *.pdb app/ 2>/dev/null || true
            cp MakerSchedule.API app/
            cp -r EmailTemplates app/ 2>/dev/null || true
            cp -r runtimes app/ 2>/dev/null || true

            # Create wwwroot directory for static files (required for Swagger UI)
            mkdir -p app/wwwroot

            echo "Files copied. App directory contents:"
            ls -la app/ | head -15

            # Create a temporary frontend directory with a simple index.html
            # This prevents nginx from failing when /var/www/makerschedule doesn't exist
            sudo mkdir -p /var/www/makerschedule
            sudo tee /var/www/makerschedule/index.html > /dev/null << 'EOF'
            <!DOCTYPE html>
            <html>
            <head>
                <title>MakerSchedule</title>
            </head>
            <body>
                <h1>MakerSchedule API is running</h1>
                <p>Frontend deployment is pending...</p>
                <p><a href="/swagger/index.html">View API Documentation</a></p>
            </body>
            </html>
            EOF
            sudo chown -R www-data:www-data /var/www/makerschedule

            # Start services without SSL first
            echo "Stopping and removing existing containers..."
            docker compose down 2>/dev/null || true

            # Remove any existing containers with the same names
            docker stop makerschedule_postgres makerschedule_api makerschedule_nginx makerschedule_certbot 2>/dev/null || true
            docker rm makerschedule_postgres makerschedule_api makerschedule_nginx makerschedule_certbot 2>/dev/null || true

            # Start new containers
            docker compose up -d

            # Wait for services to be ready
            echo "Waiting for services to start..."
            sleep 30

            # Check if containers are running
            echo "Container status:"
            docker ps -a

            # Check service status
            docker compose ps
            docker compose logs --tail=20

            # Test the API via HTTP first
            echo "Testing API endpoint via HTTP..."

            # Check if nginx is running and listening
            echo "Checking if nginx is listening on port 80..."
            netstat -tlnp | grep :80 || echo "Nothing listening on port 80"

            # Try to connect to the domain
            curl -f http://${{ secrets.DOMAIN_NAME }}/ || echo "API is starting up..."
            curl -f http://${{ secrets.DOMAIN_NAME }}/health || echo "Health check endpoint not available"

            # If connection failed, check nginx logs
            echo "Nginx container logs:"
            docker logs makerschedule_nginx 2>/dev/null || echo "Nginx container not found"

            # Check API container logs
            echo "API container logs:"
            docker logs makerschedule_api 2>/dev/null || echo "API container not found"

            # Show running containers
            docker ps

            # Cleanup old images (optional)
            docker image prune -f

      - name: Cleanup deployment files
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          script: |
            # Keep the .env file and docker-compose.yml for manual management
            rm -rf /tmp/makerschedule-deploy/app/*
            echo "Deployment complete! Services are running in Docker containers."
            echo "Use 'docker-compose logs -f' to view logs"
            echo "Use 'docker-compose restart' to restart services"
