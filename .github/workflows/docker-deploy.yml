# .github/workflows/docker-deploy.yml
name: Deploy to VPS with Docker

on:
  push:
    branches: [main]
    paths:
      - "MakeScheduleBE/**"
      - "docker-compose.production.yml"
      - "docker-compose.simple.yml"
      - "nginx.conf"
      - ".github/workflows/docker-deploy.yml"
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: dotnet restore MakeScheduleBE/MakerSchedule.sln

      - name: Build application
        run: dotnet build MakeScheduleBE/MakerSchedule.sln --configuration Release --no-restore

      - name: Publish application
        run: dotnet publish MakeScheduleBE/MakerSchedule.API/MakerSchedule.API.csproj --configuration Release --output ./publish --no-build

      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp -r publish/* deployment/
          cp docker-compose.production.yml deployment/docker-compose.yml
          cp nginx.conf deployment/
          cp Dockerfile deployment/

      - name: Test SSH Connection
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          timeout: 60s
          command_timeout: 30s
          script: |
            echo "SSH connection successful!"
            echo "Server info:"
            uname -a
            echo "Docker status:"
            docker --version || echo "Docker not installed"
            echo "Available space:"
            df -h

      - name: Copy files to VPS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          source: "deployment/*"
          target: "/tmp/makerschedule-deploy"
          strip_components: 1
          timeout: 120s
          command_timeout: 300s

      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          timeout: 120s
          command_timeout: 600s
          script: |
            # Navigate to deployment directory
            cd /tmp/makerschedule-deploy

            # Create .env file with secrets
            cat > .env << EOF
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            JWT_KEY=${{ secrets.JWT_KEY }}
            DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
            ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
            EOF

            # Create frontend directory only if it doesn't exist
            if [ ! -d /var/www/makerschedule ] || [ ! -f /var/www/makerschedule/index.html ]; then
              echo "Frontend not deployed yet, creating placeholder..."
              sudo mkdir -p /var/www/makerschedule
              echo '<html><body><h1>API is running, frontend pending...</h1><a href="/swagger/">API Docs</a></body></html>' | sudo tee /var/www/makerschedule/index.html > /dev/null
              sudo chown -R www-data:www-data /var/www/makerschedule
            else
              echo "Frontend already exists, keeping it..."
            fi

            # Stop containers first
            echo "Stopping existing containers..."
            docker compose down 2>/dev/null || true

            # The published files are already here from the SCP step
            # Docker will build the image using the Dockerfile which copies from ./publish/
            echo "Application files ready for Docker build..."
            ls -la | head -20

            # Verify nginx.conf is using the correct version from repository
            echo "Checking nginx.conf file..."
            head -20 nginx.conf

            # Build and start containers with the custom image
            echo "Building custom Docker image with application files..."
            docker compose build api

            echo "Starting containers..."
            docker compose up -d

            # Wait for services to be ready
            echo "Waiting for services to start..."
            sleep 30            # Check if containers are running
            echo "Container status:"
            docker ps -a

            # Check service status
            docker compose ps
            docker compose logs --tail=20

            # Test the API via HTTP first
            echo "Testing API endpoint via HTTP..."

            # Check if nginx is running and listening
            echo "Checking if nginx is listening on port 80..."
            netstat -tlnp | grep :80 || echo "Nothing listening on port 80"

            # Try to connect to the domain
            curl -f http://${{ secrets.DOMAIN_NAME }}/ || echo "API is starting up..."
            curl -f http://${{ secrets.DOMAIN_NAME }}/health || echo "Health check endpoint not available"

            # If connection failed, check nginx logs
            echo "Nginx container logs:"
            docker logs makerschedule_nginx 2>/dev/null || echo "Nginx container not found"

            # Check API container logs
            echo "API container logs:"
            docker logs makerschedule_api 2>/dev/null || echo "API container not found"

            # Show running containers
            docker ps

            # Cleanup old images (optional)
            docker image prune -f

      - name: Cleanup deployment files
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          script: |
            # Keep the .env file and docker-compose.yml for manual management
            rm -rf /tmp/makerschedule-deploy/app/*
            echo "Deployment complete! Services are running in Docker containers."
            echo "Use 'docker-compose logs -f' to view logs"
            echo "Use 'docker-compose restart' to restart services"
