# .github/workflows/vps-deploy.yml
name: Deploy to VPS

on:
  # push:
  #   branches: [main]
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: dotnet restore MakeScheduleBE/MakerSchedule.sln

      - name: Build application
        run: dotnet build MakeScheduleBE/MakerSchedule.sln --configuration Release --no-restore

      - name: Publish application
        run: dotnet publish MakeScheduleBE/MakerSchedule.API/MakerSchedule.API.csproj --configuration Release --output ./publish --no-build

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          script: |
            # Install Docker if not already installed
            if ! command -v docker &> /dev/null; then
              sudo apt update
              sudo apt install -y docker.io docker-compose
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi

            # Stop any existing containers
            docker stop makerschedule_postgres 2>/dev/null || true
            docker rm makerschedule_postgres 2>/dev/null || true

            # Start PostgreSQL in Docker
            docker run -d \
              --name makerschedule_postgres \
              -e POSTGRES_DB=makerschedule \
              -e POSTGRES_USER=appuser \
              -e POSTGRES_PASSWORD='${{ secrets.DB_PASSWORD }}' \
              -p 5432:5432 \
              --restart unless-stopped \
              postgres:15

            # Wait for PostgreSQL to be ready
            echo "Waiting for PostgreSQL to be ready..."
            for i in {1..30}; do
              if docker exec makerschedule_postgres pg_isready -U appuser -d makerschedule; then
                echo "PostgreSQL is ready!"
                break
              fi
              echo "Waiting... ($i/30)"
              sleep 2
            done

            # Install .NET 8 runtime if not already installed
            if ! command -v dotnet &> /dev/null; then
              wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
              sudo dpkg -i packages-microsoft-prod.deb
              rm packages-microsoft-prod.deb
              sudo apt-get update
              sudo apt-get install -y aspnetcore-runtime-8.0
            fi

            # Create makerschedule user if it doesn't exist
            if ! id "makerschedule" &>/dev/null; then
              sudo useradd --system --no-create-home --shell /bin/false makerschedule
            fi

            # Create secrets directory and file
            sudo mkdir -p /etc/makerschedule
            sudo tee /etc/makerschedule/secrets.env > /dev/null <<EOF
            ASPNETCORE_ENVIRONMENT=Production
            ConnectionStrings__DefaultConnection=Host=localhost;Port=5432;Database=makerschedule;Username=appuser;Password=${{ secrets.DB_PASSWORD }}
            Jwt__Key=${{ secrets.JWT_KEY }}
            AzureStorage__ConnectionString=
            UseAzureKeyVault=false
            UseAzureStorage=false
            EOF
            sudo chmod 600 /etc/makerschedule/secrets.env
            sudo chown makerschedule:makerschedule /etc/makerschedule/secrets.env

            # Stop the service if it exists
            sudo systemctl stop makerschedule || true

            # Create application directory
            sudo mkdir -p /opt/makerschedule

            # Backup current deployment (if exists)
            if [ -d "/opt/makerschedule/current" ]; then
              sudo mv /opt/makerschedule/current /opt/makerschedule/backup-$(date +%Y%m%d_%H%M%S)
            fi

            # Create new deployment directory
            sudo mkdir -p /opt/makerschedule/current

      - name: Copy files to VPS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          source: "./publish/*"
          target: "/tmp/makerschedule-deploy"
          strip_components: 1

      - name: Complete deployment
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          script: |
            # Move files to final location
            sudo mv /tmp/makerschedule-deploy/* /opt/makerschedule/current/
            sudo chown -R makerschedule:makerschedule /opt/makerschedule/current
            sudo chmod +x /opt/makerschedule/current/MakerSchedule.API

            # Create systemd service file if it doesn't exist
            if [ ! -f "/etc/systemd/system/makerschedule.service" ]; then
              sudo tee /etc/systemd/system/makerschedule.service > /dev/null <<EOF
            [Unit]
            Description=MakerSchedule API
            After=network.target
            After=postgresql.service

            [Service]
            Type=notify
            User=makerschedule
            Group=makerschedule
            WorkingDirectory=/opt/makerschedule/current
            ExecStart=/usr/bin/dotnet MakerSchedule.API.dll --urls "http://0.0.0.0:5000"
            EnvironmentFile=/etc/makerschedule/secrets.env
            Restart=always
            RestartSec=10
            KillSignal=SIGINT
            Environment=ASPNETCORE_ENVIRONMENT=Production
            Environment=DOTNET_PRINT_TELEMETRY_MESSAGE=false

            [Install]
            WantedBy=multi-user.target
            EOF
              sudo systemctl daemon-reload
            fi

            # Debug: Check environment and try running manually
            echo "=== Environment Check ==="
            cat /etc/makerschedule/secrets.env
            echo "=== PostgreSQL Status ==="
            sudo systemctl status postgresql --no-pager -l
            echo "=== Manual App Test ==="
            cd /opt/makerschedule/current
            timeout 10s sudo -u makerschedule bash -c 'set -a; source /etc/makerschedule/secrets.env; set +a; /usr/bin/dotnet MakerSchedule.API.dll' || echo "Manual test failed or timed out"

            # Start the service
            sudo systemctl start makerschedule
            sudo systemctl enable makerschedule

            # Check if service is running and get detailed logs
            sleep 5
            echo "=== Service Status ==="
            sudo systemctl status makerschedule --no-pager -l
            echo "=== Service Logs (last 50 lines) ==="
            sudo journalctl -u makerschedule -n 50 --no-pager
            echo "=== Check if port is listening ==="
            sudo netstat -tlnp | grep dotnet || echo "No dotnet processes listening"
            echo "=== Check application files ==="
            ls -la /opt/makerschedule/current/
            echo "=== Test direct execution ==="
            cd /opt/makerschedule/current
            sudo -u makerschedule bash -c 'set -a; source /etc/makerschedule/secrets.env; set +a; timeout 15s /usr/bin/dotnet MakerSchedule.API.dll --urls "http://0.0.0.0:5000"' || echo "Direct execution failed"
