// <auto-generated />
using System;
using MakerSchedule.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MakerSchedule.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.DomainUser.DomainUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredContactMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("DomainUsers");
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.Event.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c2f8d0f9-b2af-4d3a-91da-13c112c6212c"),
                            Description = "Advanced pottery techniques for experienced artists. Wheel throwing and glazing. In this workshop, participants will explore complex forms and surface decoration methods, including carving, slip trailing, and underglaze painting. The instructor will demonstrate advanced wheel techniques, such as making large vessels and assembling multi-part pieces. You will also learn about glaze chemistry, firing schedules, and troubleshooting common issues. Bring your creative ideas and prepare to push your skills to the next level. All materials and firing fees are included. Prior pottery experience is required for this class.",
                            Duration = 7200000,
                            EventName = "Advanced Pottery",
                            EventTypeId = new Guid("4861f65b-fff2-42b1-a5a1-e55a45bfc2ef")
                        },
                        new
                        {
                            Id = new Guid("3709300b-3c35-4350-9f3c-277759214bbb"),
                            Description = "Learn to build a simple wooden shelf. All materials provided. This hands-on workshop covers the basics of woodworking, including measuring, cutting, sanding, and assembling wood pieces. You will use both hand and power tools under the guidance of an experienced instructor. Safety procedures and tool maintenance will be emphasized throughout the session. By the end of the class, you will have constructed your own sturdy shelf to take home. The workshop also includes tips on finishing techniques, such as staining and sealing, to enhance the appearance and durability of your project. Suitable for all skill levels.",
                            Duration = 10800000,
                            EventName = "Woodworking Workshop",
                            EventTypeId = new Guid("e25981d8-cd4d-412f-b261-eede0559c5f6")
                        },
                        new
                        {
                            Id = new Guid("5df8ac2c-b1af-4f9d-861d-a3e1e42b23ec"),
                            Description = "Introduction to sewing for beginners. Learn to use a sewing machine and create simple projects. This class covers the fundamentals of sewing, including threading a machine, selecting fabrics, reading patterns, and basic stitches. You will practice on scrap fabric before creating a simple project to take home. The instructor will provide guidance on choosing the right materials and tools for your projects. Perfect for those who want to start sewing their own clothes or home decor items. All equipment and materials are provided.",
                            Duration = 5400000,
                            EventName = "Sewing Basics",
                            EventTypeId = new Guid("dd74cd38-bf1d-4694-8b28-2cccbdf44fe9")
                        });
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.Event.Occurrence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ScheduleStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Occurrences");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0d9b8f4-0da5-4ec2-9389-f62d1f181ea1"),
                            Duration = 2700000,
                            EventId = new Guid("c2f8d0f9-b2af-4d3a-91da-13c112c6212c"),
                            ScheduleStart = new DateTime(2025, 7, 20, 15, 30, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("86424577-1281-448e-8612-9963a71c8c17"),
                            Duration = 2700000,
                            EventId = new Guid("c2f8d0f9-b2af-4d3a-91da-13c112c6212c"),
                            ScheduleStart = new DateTime(2025, 8, 8, 20, 30, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f2b4bbc8-0fa1-4329-8b41-50fc0aa382df"),
                            Duration = 5400000,
                            EventId = new Guid("c2f8d0f9-b2af-4d3a-91da-13c112c6212c"),
                            ScheduleStart = new DateTime(2025, 6, 22, 16, 15, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ab20b5f7-0564-4106-9bb8-88ba2c4b85cd"),
                            Duration = 5400000,
                            EventId = new Guid("c2f8d0f9-b2af-4d3a-91da-13c112c6212c"),
                            ScheduleStart = new DateTime(2025, 8, 11, 17, 15, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f0512477-cabb-4739-ac73-255a21383efb"),
                            Duration = 4500000,
                            EventId = new Guid("c2f8d0f9-b2af-4d3a-91da-13c112c6212c"),
                            ScheduleStart = new DateTime(2025, 7, 25, 21, 30, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("446476c1-fd5d-47b9-9190-e3cd1c064303"),
                            Duration = 7200000,
                            EventId = new Guid("c2f8d0f9-b2af-4d3a-91da-13c112c6212c"),
                            ScheduleStart = new DateTime(2025, 8, 3, 14, 30, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("39f4cdc5-8d8f-42c6-b6e8-bdc9e7a60b6b"),
                            Duration = 8100000,
                            EventId = new Guid("3709300b-3c35-4350-9f3c-277759214bbb"),
                            ScheduleStart = new DateTime(2025, 7, 25, 20, 0, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("aa16611c-b10e-4e19-b77d-8e229f7e5306"),
                            Duration = 1800000,
                            EventId = new Guid("3709300b-3c35-4350-9f3c-277759214bbb"),
                            ScheduleStart = new DateTime(2025, 8, 28, 18, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("0fc47864-8de7-4c62-a870-f32b9339d0a6"),
                            Duration = 1800000,
                            EventId = new Guid("3709300b-3c35-4350-9f3c-277759214bbb"),
                            ScheduleStart = new DateTime(2025, 7, 13, 19, 45, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8280c3f1-f062-4a01-ae24-fb39ae13ea8a"),
                            Duration = 4500000,
                            EventId = new Guid("3709300b-3c35-4350-9f3c-277759214bbb"),
                            ScheduleStart = new DateTime(2025, 8, 21, 21, 30, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d801ca5f-31ca-41e0-a8d4-0d0105a4c2ea"),
                            Duration = 7200000,
                            EventId = new Guid("3709300b-3c35-4350-9f3c-277759214bbb"),
                            ScheduleStart = new DateTime(2025, 7, 20, 14, 0, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d1b309f5-49cb-4fd9-8db1-f027e4a989ee"),
                            Duration = 3600000,
                            EventId = new Guid("5df8ac2c-b1af-4f9d-861d-a3e1e42b23ec"),
                            ScheduleStart = new DateTime(2025, 7, 21, 16, 45, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("45ed2fd1-a21c-4829-b293-abb2e0aa658d"),
                            Duration = 5400000,
                            EventId = new Guid("5df8ac2c-b1af-4f9d-861d-a3e1e42b23ec"),
                            ScheduleStart = new DateTime(2025, 8, 26, 15, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("efc70e2a-2707-410d-9563-36cf0dfd1238"),
                            Duration = 6300000,
                            EventId = new Guid("5df8ac2c-b1af-4f9d-861d-a3e1e42b23ec"),
                            ScheduleStart = new DateTime(2025, 7, 3, 14, 15, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e90fda5a-273d-4dfd-85f9-6f76a8b57ae1"),
                            Duration = 3600000,
                            EventId = new Guid("5df8ac2c-b1af-4f9d-861d-a3e1e42b23ec"),
                            ScheduleStart = new DateTime(2025, 8, 25, 15, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("32fb47f3-456e-4d98-9372-9493fc3f910a"),
                            Duration = 1800000,
                            EventId = new Guid("5df8ac2c-b1af-4f9d-861d-a3e1e42b23ec"),
                            ScheduleStart = new DateTime(2025, 7, 14, 14, 30, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d7997b53-ee36-4cc2-8683-6017191773b6"),
                            Duration = 4500000,
                            EventId = new Guid("5df8ac2c-b1af-4f9d-861d-a3e1e42b23ec"),
                            ScheduleStart = new DateTime(2025, 8, 17, 14, 45, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.Event.OccurrenceAttendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Attended")
                        .HasColumnType("bit");

                    b.Property<Guid>("OccurrenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OccurrenceId");

                    b.HasIndex("UserId");

                    b.ToTable("OccurrenceAttendees");
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.Event.OccurrenceLeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OccurrenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OccurrenceId");

                    b.HasIndex("UserId");

                    b.ToTable("OccurrenceLeaders");
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.EventType.EventType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e25981d8-cd4d-412f-b261-eede0559c5f6"),
                            Name = "Woodworking"
                        },
                        new
                        {
                            Id = new Guid("4861f65b-fff2-42b1-a5a1-e55a45bfc2ef"),
                            Name = "Pottery"
                        },
                        new
                        {
                            Id = new Guid("dd74cd38-bf1d-4694-8b28-2cccbdf44fe9"),
                            Name = "Sewing"
                        });
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.DomainUser.DomainUser", b =>
                {
                    b.HasOne("MakerSchedule.Domain.Aggregates.User.User", "User")
                        .WithOne("DomainUser")
                        .HasForeignKey("MakerSchedule.Domain.Aggregates.DomainUser.DomainUser", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.Event.Event", b =>
                {
                    b.HasOne("MakerSchedule.Domain.Aggregates.EventType.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.Event.Occurrence", b =>
                {
                    b.HasOne("MakerSchedule.Domain.Aggregates.Event.Event", "Event")
                        .WithMany("Occurrences")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.Event.OccurrenceAttendee", b =>
                {
                    b.HasOne("MakerSchedule.Domain.Aggregates.Event.Occurrence", "Occurrence")
                        .WithMany("Attendees")
                        .HasForeignKey("OccurrenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MakerSchedule.Domain.Aggregates.DomainUser.DomainUser", "User")
                        .WithMany("OccurrencesAttended")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Occurrence");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.Event.OccurrenceLeader", b =>
                {
                    b.HasOne("MakerSchedule.Domain.Aggregates.Event.Occurrence", "Occurrence")
                        .WithMany("Leaders")
                        .HasForeignKey("OccurrenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MakerSchedule.Domain.Aggregates.DomainUser.DomainUser", "User")
                        .WithMany("OccurrencesLed")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Occurrence");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MakerSchedule.Domain.Aggregates.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MakerSchedule.Domain.Aggregates.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MakerSchedule.Domain.Aggregates.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MakerSchedule.Domain.Aggregates.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.DomainUser.DomainUser", b =>
                {
                    b.Navigation("OccurrencesAttended");

                    b.Navigation("OccurrencesLed");
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.Event.Event", b =>
                {
                    b.Navigation("Occurrences");
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.Event.Occurrence", b =>
                {
                    b.Navigation("Attendees");

                    b.Navigation("Leaders");
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.User.User", b =>
                {
                    b.Navigation("DomainUser");
                });
#pragma warning restore 612, 618
        }
    }
}
