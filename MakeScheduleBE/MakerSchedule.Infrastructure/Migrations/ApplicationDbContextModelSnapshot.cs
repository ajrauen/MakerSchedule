// <auto-generated />
using System;
using System.Collections.Generic;
using MakerSchedule.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MakerSchedule.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.DomainUser.DomainUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreferredContactMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("DomainUsers");
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.Event.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassSize")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<Guid>>("EventTagIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c2f8d0f9-b2af-4d3a-91da-13c112c6212c"),
                            ClassSize = 13,
                            Description = "Advanced pottery techniques for experienced artists. Wheel throwing and glazing. In this workshop, participants will explore complex forms and surface decoration methods, including carving, slip trailing, and underglaze painting. The instructor will demonstrate advanced wheel techniques, such as making large vessels and assembling multi-part pieces. You will also learn about glaze chemistry, firing schedules, and troubleshooting common issues. Bring your creative ideas and prepare to push your skills to the next level. All materials and firing fees are included. Prior pottery experience is required for this class.",
                            Duration = 120,
                            EventName = "Advanced Pottery",
                            EventTagIds = new List<Guid>(),
                            Price = 170.547263980892m
                        },
                        new
                        {
                            Id = new Guid("3709300b-3c35-4350-9f3c-277759214bbb"),
                            ClassSize = 11,
                            Description = "Learn to build a simple wooden shelf. All materials provided. This hands-on workshop covers the basics of woodworking, including measuring, cutting, sanding, and assembling wood pieces. You will use both hand and power tools under the guidance of an experienced instructor. Safety procedures and tool maintenance will be emphasized throughout the session. By the end of the class, you will have constructed your own sturdy shelf to take home. The workshop also includes tips on finishing techniques, such as staining and sealing, to enhance the appearance and durability of your project. Suitable for all skill levels.",
                            Duration = 180,
                            EventName = "Woodworking Workshop",
                            EventTagIds = new List<Guid>(),
                            Price = 130.119377303008m
                        },
                        new
                        {
                            Id = new Guid("5df8ac2c-b1af-4f9d-861d-a3e1e42b23ec"),
                            ClassSize = 6,
                            Description = "Introduction to sewing for beginners. Learn to use a sewing machine and create simple projects. This class covers the fundamentals of sewing, including threading a machine, selecting fabrics, reading patterns, and basic stitches. You will practice on scrap fabric before creating a simple project to take home. The instructor will provide guidance on choosing the right materials and tools for your projects. Perfect for those who want to start sewing their own clothes or home decor items. All equipment and materials are provided.",
                            Duration = 90,
                            EventName = "Sewing Basics",
                            EventTagIds = new List<Guid>(),
                            Price = 85.8259459637288m
                        });
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.Event.Occurrence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ScheduleStart")
                        .HasColumnType("timestamptz");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Occurrences");

                    b.HasData(
                        new
                        {
                            Id = new Guid("543496c3-f1a5-4817-abb5-f45dc20cc80a"),
                            EventId = new Guid("c2f8d0f9-b2af-4d3a-91da-13c112c6212c"),
                            ScheduleStart = new DateTime(2025, 9, 23, 15, 30, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("cd49197d-9dcc-42b1-9a70-77a3791d2d5c"),
                            EventId = new Guid("c2f8d0f9-b2af-4d3a-91da-13c112c6212c"),
                            ScheduleStart = new DateTime(2025, 10, 12, 20, 30, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("1736c311-2860-400b-9991-b1e7636aaf6c"),
                            EventId = new Guid("c2f8d0f9-b2af-4d3a-91da-13c112c6212c"),
                            ScheduleStart = new DateTime(2025, 8, 26, 16, 15, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("2d368593-7767-4b0d-9518-fffc23837653"),
                            EventId = new Guid("c2f8d0f9-b2af-4d3a-91da-13c112c6212c"),
                            ScheduleStart = new DateTime(2025, 10, 15, 17, 15, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8f09c2be-29e1-4697-9cc9-0ecfbc15631b"),
                            EventId = new Guid("c2f8d0f9-b2af-4d3a-91da-13c112c6212c"),
                            ScheduleStart = new DateTime(2025, 9, 28, 21, 30, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("0cbce745-3d73-42be-a6fd-d182fbdc6046"),
                            EventId = new Guid("c2f8d0f9-b2af-4d3a-91da-13c112c6212c"),
                            ScheduleStart = new DateTime(2025, 10, 7, 14, 30, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8c4f779e-38b7-4681-aa91-c100201aebf3"),
                            EventId = new Guid("3709300b-3c35-4350-9f3c-277759214bbb"),
                            ScheduleStart = new DateTime(2025, 9, 28, 20, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("bfe2e24c-9eb9-4554-a5cb-409d60cf1a9f"),
                            EventId = new Guid("3709300b-3c35-4350-9f3c-277759214bbb"),
                            ScheduleStart = new DateTime(2025, 11, 1, 18, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ed4e9dcc-0719-4f87-a457-d1fa938af91e"),
                            EventId = new Guid("3709300b-3c35-4350-9f3c-277759214bbb"),
                            ScheduleStart = new DateTime(2025, 9, 16, 19, 45, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("cb42f050-22cf-4a5e-b588-66bb8e000985"),
                            EventId = new Guid("3709300b-3c35-4350-9f3c-277759214bbb"),
                            ScheduleStart = new DateTime(2025, 10, 25, 21, 30, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("acdfc74d-0e52-4b86-9a01-a1ea6f3f294e"),
                            EventId = new Guid("3709300b-3c35-4350-9f3c-277759214bbb"),
                            ScheduleStart = new DateTime(2025, 9, 23, 14, 0, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("849b3652-86f8-45a5-b4c7-9bba8964c711"),
                            EventId = new Guid("5df8ac2c-b1af-4f9d-861d-a3e1e42b23ec"),
                            ScheduleStart = new DateTime(2025, 9, 24, 16, 45, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("9ffa2d46-4f2c-4edf-bda6-5e8a28ec3d55"),
                            EventId = new Guid("5df8ac2c-b1af-4f9d-861d-a3e1e42b23ec"),
                            ScheduleStart = new DateTime(2025, 10, 30, 15, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4735d232-e5b8-4ad4-9104-0835a162ff6a"),
                            EventId = new Guid("5df8ac2c-b1af-4f9d-861d-a3e1e42b23ec"),
                            ScheduleStart = new DateTime(2025, 9, 6, 14, 15, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("cc6fdb9a-88e5-447d-a2b2-280d779ebc7a"),
                            EventId = new Guid("5df8ac2c-b1af-4f9d-861d-a3e1e42b23ec"),
                            ScheduleStart = new DateTime(2025, 10, 29, 15, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f9d27e1c-76d3-4d3c-901f-0106160e14dc"),
                            EventId = new Guid("5df8ac2c-b1af-4f9d-861d-a3e1e42b23ec"),
                            ScheduleStart = new DateTime(2025, 9, 17, 14, 30, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c6f1e93e-8b45-4b34-8881-5e8dfdf39fbb"),
                            EventId = new Guid("5df8ac2c-b1af-4f9d-861d-a3e1e42b23ec"),
                            ScheduleStart = new DateTime(2025, 10, 21, 14, 45, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.Event.OccurrenceAttendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Attended")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OccurrenceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OccurrenceId");

                    b.HasIndex("UserId");

                    b.ToTable("OccurrenceAttendees");
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.Event.OccurrenceLeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("OccurrenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OccurrenceId");

                    b.HasIndex("UserId");

                    b.ToTable("OccurrenceLeaders");
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MakerSchedule.Domain.Entities.EventTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EventTags");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.DomainUser.DomainUser", b =>
                {
                    b.HasOne("MakerSchedule.Domain.Aggregates.User.User", "User")
                        .WithOne("DomainUser")
                        .HasForeignKey("MakerSchedule.Domain.Aggregates.DomainUser.DomainUser", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.Event.Occurrence", b =>
                {
                    b.HasOne("MakerSchedule.Domain.Aggregates.Event.Event", "Event")
                        .WithMany("Occurrences")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.Event.OccurrenceAttendee", b =>
                {
                    b.HasOne("MakerSchedule.Domain.Aggregates.Event.Occurrence", "Occurrence")
                        .WithMany("Attendees")
                        .HasForeignKey("OccurrenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MakerSchedule.Domain.Aggregates.DomainUser.DomainUser", "User")
                        .WithMany("OccurrencesAttended")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Occurrence");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.Event.OccurrenceLeader", b =>
                {
                    b.HasOne("MakerSchedule.Domain.Aggregates.Event.Occurrence", "Occurrence")
                        .WithMany("Leaders")
                        .HasForeignKey("OccurrenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MakerSchedule.Domain.Aggregates.DomainUser.DomainUser", "User")
                        .WithMany("OccurrencesLed")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Occurrence");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MakerSchedule.Domain.Aggregates.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MakerSchedule.Domain.Aggregates.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MakerSchedule.Domain.Aggregates.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MakerSchedule.Domain.Aggregates.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.DomainUser.DomainUser", b =>
                {
                    b.Navigation("OccurrencesAttended");

                    b.Navigation("OccurrencesLed");
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.Event.Event", b =>
                {
                    b.Navigation("Occurrences");
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.Event.Occurrence", b =>
                {
                    b.Navigation("Attendees");

                    b.Navigation("Leaders");
                });

            modelBuilder.Entity("MakerSchedule.Domain.Aggregates.User.User", b =>
                {
                    b.Navigation("DomainUser");
                });
#pragma warning restore 612, 618
        }
    }
}
